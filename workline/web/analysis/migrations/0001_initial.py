# Generated by Django 4.1 on 2023-10-24 13:30

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='APIInfo',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('class_name', models.CharField(max_length=120)),
                ('constructor_stmt', models.TextField()),
                ('class_url', models.TextField()),
            ],
            options={
                'db_table': 'API_Info',
            },
        ),
        migrations.CreateModel(
            name='ConstructorInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_name', models.TextField()),
                ('class_description', models.TextField()),
                ('constructor_stmt', models.TextField()),
                ('package_name', models.TextField()),
            ],
            options={
                'db_table': 'Constructor_Info',
            },
        ),
        migrations.CreateModel(
            name='Expression',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('type', models.CharField(max_length=100, null=True)),
                ('varList', models.TextField(null=True)),
                ('filepath', models.CharField(max_length=500, null=True)),
                ('method_info', models.TextField()),
                ('energy', models.FloatField(null=True)),
                ('import_info', models.TextField(null=True)),
            ],
            options={
                'db_table': 'Expression',
            },
        ),
        migrations.CreateModel(
            name='Function',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Function_content', models.TextField(null=True)),
                ('SourceFun_id', models.IntegerField(null=True)),
                ('Mutation_method', models.IntegerField(null=True)),
                ('Mutation_times', models.IntegerField(null=True)),
                ('Remark', models.TextField(null=True)),
            ],
            options={
                'db_table': 'Table_Function',
            },
        ),
        migrations.CreateModel(
            name='GeneVariable',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('vari_name', models.CharField(max_length=1000, null=True)),
                ('vari_type', models.CharField(max_length=1000, null=True)),
                ('vari_value', models.TextField(null=True)),
            ],
            options={
                'db_table': 'gene_variable',
            },
        ),
        migrations.CreateModel(
            name='javac_Result',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Testcase_id', models.IntegerField(null=True)),
                ('Testbed_id', models.IntegerField(null=True)),
                ('Returncode', models.IntegerField(null=True)),
                ('Stdout', models.TextField(null=True)),
                ('Stderr', models.TextField(null=True)),
                ('Duration_ms', models.IntegerField(null=True)),
                ('Seed_coverage', models.DecimalField(decimal_places=3, max_digits=5, null=True)),
                ('Engine_coverage', models.DecimalField(decimal_places=3, max_digits=5, null=True)),
                ('Remark', models.TextField(null=True)),
            ],
            options={
                'db_table': 'Table_javac_Result',
            },
        ),
        migrations.CreateModel(
            name='javac_Suspicious_Result',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Error_type', models.TextField(null=True)),
                ('Testcase_id', models.IntegerField(null=True)),
                ('Function_id', models.IntegerField(null=True)),
                ('Testbed_id', models.IntegerField(null=True)),
                ('Remark', models.TextField(null=True)),
            ],
            options={
                'db_table': 'Table_javac_Suspicious_Result',
            },
        ),
        migrations.CreateModel(
            name='MethodInfo',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('class_name', models.TextField()),
                ('method_name', models.TextField()),
                ('param_info', models.TextField()),
                ('boundary_value', models.TextField()),
                ('return_type', models.TextField()),
                ('throws_desc', models.TextField(null=True)),
                ('import_stmt', models.TextField(null=True)),
                ('class_page', models.TextField()),
            ],
            options={
                'db_table': 'Method_Info',
            },
        ),
        migrations.CreateModel(
            name='QuickMethodInfo',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('class_name', models.TextField()),
                ('method_name', models.TextField()),
                ('param_info', models.TextField()),
                ('boundary_value', models.TextField()),
                ('return_type', models.TextField()),
                ('throws_desc', models.TextField(null=True)),
                ('import_stmt', models.TextField(null=True)),
                ('class_page', models.TextField()),
            ],
            options={
                'db_table': 'Quick_Method_Info',
            },
        ),
        migrations.CreateModel(
            name='RelaVariable',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('rela_name', models.CharField(max_length=500)),
                ('rela_table', models.CharField(max_length=100)),
                ('vari_id', models.IntegerField(null=True)),
                ('rela_type', models.CharField(max_length=500, null=True)),
            ],
            options={
                'db_table': 'rela_variable',
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Testcase_id', models.IntegerField(null=True)),
                ('Testbed_id', models.IntegerField(null=True)),
                ('Returncode', models.IntegerField(null=True)),
                ('Stdout', models.TextField(null=True)),
                ('Stderr', models.TextField(null=True)),
                ('Duration_ms', models.IntegerField(null=True)),
                ('Seed_coverage', models.DecimalField(decimal_places=3, max_digits=5, null=True)),
                ('Engine_coverage', models.DecimalField(decimal_places=3, max_digits=5, null=True)),
                ('Remark', models.TextField(null=True)),
            ],
            options={
                'db_table': 'Table_Result',
            },
        ),
        migrations.CreateModel(
            name='Statement',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('type', models.CharField(max_length=100, null=True)),
                ('varList', models.TextField(null=True)),
                ('filepath', models.CharField(max_length=500, null=True)),
                ('energy', models.FloatField(null=True)),
                ('import_info', models.TextField(null=True)),
            ],
            options={
                'db_table': 'Statement',
            },
        ),
        migrations.CreateModel(
            name='Suspicious_Result',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Error_type', models.TextField(null=True)),
                ('Testcase_id', models.IntegerField(null=True)),
                ('Function_id', models.IntegerField(null=True)),
                ('Testbed_id', models.IntegerField(null=True)),
                ('Remark', models.TextField(null=True)),
            ],
            options={
                'db_table': 'Table_Suspicious_Result',
            },
        ),
        migrations.CreateModel(
            name='TableBinaryExprFalse',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('binary_expr_content', models.TextField()),
                ('variable_type_binary_expr', models.TextField()),
            ],
            options={
                'db_table': 'Table_BinaryExpr_False',
            },
        ),
        migrations.CreateModel(
            name='TableBinaryExprTrue',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('binary_expr_content', models.TextField()),
                ('variable_type_binary_expr', models.TextField()),
            ],
            options={
                'db_table': 'Table_BinaryExpr_True',
            },
        ),
        migrations.CreateModel(
            name='Testbed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Testbed_name', models.TextField(null=True, verbose_name='引擎名称')),
                ('Testbed_version', models.TextField(null=True, verbose_name='引擎版本')),
                ('Testbed_location', models.TextField(null=True, verbose_name='引擎位置')),
                ('Remark', models.TextField(null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name': '引擎',
                'verbose_name_plural': '引擎',
                'db_table': 'Table_Testbed',
            },
        ),
        migrations.CreateModel(
            name='Testcase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Testcase_context', models.TextField(null=True)),
                ('SourceFun_id', models.IntegerField(null=True)),
                ('SourceTestcase_id', models.IntegerField(null=True)),
                ('Fuzzing_times', models.IntegerField(null=True)),
                ('Mutation_method', models.IntegerField(null=True)),
                ('Mutation_times', models.IntegerField(null=True)),
                ('Interesting_times', models.IntegerField(null=True)),
                ('Probability', models.IntegerField(null=True)),
                ('Remark', models.TextField(null=True)),
            ],
            options={
                'db_table': 'Table_Testcase',
            },
        ),
        migrations.CreateModel(
            name='Variables',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('vari_name', models.CharField(max_length=1000, null=True)),
                ('vari_type', models.CharField(max_length=1000, null=True)),
                ('vari_value', models.TextField(null=True)),
                ('vari_expr', models.TextField(null=True)),
                ('vari_ori_file', models.CharField(max_length=500, null=True)),
                ('import_info', models.TextField(null=True)),
                ('package_Info', models.TextField(null=True)),
                ('vari_otherInfo', models.TextField(null=True)),
                ('varList', models.TextField(null=True)),
                ('energy', models.FloatField(null=True)),
            ],
            options={
                'db_table': 'variables',
            },
        ),
    ]
